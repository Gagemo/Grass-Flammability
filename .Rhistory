plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
text = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.text.x = element_text(size = 12, face = "italic", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 12, face = "bold", color = "black"),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm") # Add margin
) +
scale_fill_manual(values = cbbPalette) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
# Add the generated plot to our list
plot_list[[metric_name]] <- p
}
# Combine all the plots into a single figure using ggarrange.
# The `labels` argument adds the A, B, C, ... labels.
combined_plot <- ggarrange(plotlist = plot_list,
ncol = 2, nrow = 3,
align = "hv",
common.legend = FALSE)
# Save the final combined figure to a file.
ggsave("Figures/Figure3_Combined_Boxplots.png",
plot = combined_plot,
width = 12, height = 16, units = "in")
################################################################################
################################################################################
#########################      Grass - Flammability      ###########################
#####################  PERMANOVA, MANCOVA, Regression    #########################
#########################      University of Florida       #######################
#########################         Gage LaPierre          #######################
#########################               2023               #######################
################################################################################
################################################################################
######################### Clears Environment & History #########################
rm(list=ls(all=TRUE))
cat("\014")
#########################      Installs Packages      ##########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` package has been added to handle problematic column names.
list.of.packages <- c("tidyverse", "vegan", "multcomp", "multcompView",
"ggpubr", "cowplot", "janitor")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################      Loads Packages       ###########################
library(tidyverse)
library(vegan)
library(multcomp)
library(multcompView)
library(ggpubr)
library(cowplot)
library(janitor)
##########################        Read in Data       ###########################
# Read in the three CSV files from the current directory.
# The previous version had an incorrect file path (e.g., "Data/...")
# We first clean and aggregate the data from each file before merging.
data_time_raw <- read.csv("Data/Flammability Project - Time.csv")
data_weight_raw <- read.csv("Data/Flammability Project - Weight.csv")
data_temp_raw <- read.csv("Data/Flammability Project - Temp.csv")
# Use janitor::clean_names() on each dataframe to standardize column names.
# This is a robust way to handle inconsistent or duplicate column headers.
data_time_clean <- data_time_raw %>%
clean_names() %>%
dplyr::select(id, species, ruderal, fb, max_height, flame_total, smld_total) %>%
rename(Fuel_Bed_Height = fb,
Max_Flame_Height = max_height,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total)
data_weight_clean <- data_weight_raw %>%
clean_names() %>%
dplyr::select(id, mass_loss, mass_rate) %>%
rename(Mass_Loss = mass_loss,
Mass_Loss_Rate = mass_rate)
# Aggregate the temperature data by taking the maximum temperature for each ID.
# We first filter out any rows with missing temperature values (NAs) to prevent
# the max() function from returning -Inf and generating warnings.
data_temp_clean <- data_temp_raw %>%
clean_names() %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop') %>%
# The summary() output showed these were characters. Explicitly convert to numeric.
mutate(Temp_Fuel_Bed = as.numeric(Temp_Fuel_Bed),
Temp_10cm_Above = as.numeric(Temp_10cm_Above))
# Merge all three cleaned dataframes into a single data frame with one row per ID.
data_final <- data_time_clean %>%
inner_join(data_weight_clean, by = "id") %>%
inner_join(data_temp_clean, by = "id")
# Inspect the final merged data frame to ensure it's correct
str(data_final)
summary(data_final)
# Now, we will define the list of metrics we want to plot.
# This allows us to loop through each one to create the individual plots.
metrics_to_plot <- c(
"Fuel_Bed_Height", "Max_Flame_Height", "Flame_Duration",
"Smoldering_Duration", "Mass_Loss", "Mass_Loss_Rate",
)
################################################################################
################################################################################
#########################      Grass - Flammability      ###########################
#####################  PERMANOVA, MANCOVA, Regression    #########################
#########################      University of Florida       #######################
#########################         Gage LaPierre          #######################
#########################               2023               #######################
################################################################################
################################################################################
######################### Clears Environment & History #########################
rm(list=ls(all=TRUE))
cat("\014")
#########################      Installs Packages      ##########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` package has been added to handle problematic column names.
list.of.packages <- c("tidyverse", "vegan", "multcomp", "multcompView",
"ggpubr", "cowplot", "janitor")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################      Loads Packages       ###########################
library(tidyverse)
library(vegan)
library(multcomp)
library(multcompView)
library(ggpubr)
library(cowplot)
library(janitor)
##########################        Read in Data       ###########################
# Read in the three CSV files from the current directory.
# The previous version had an incorrect file path (e.g., "Data/...")
# We first clean and aggregate the data from each file before merging.
data_time_raw <- read.csv("Data/Flammability Project - Time.csv")
data_weight_raw <- read.csv("Data/Flammability Project - Weight.csv")
data_temp_raw <- read.csv("Data/Flammability Project - Temp.csv")
# Use janitor::clean_names() on each dataframe to standardize column names.
# This is a robust way to handle inconsistent or duplicate column headers.
data_time_clean <- data_time_raw %>%
clean_names() %>%
dplyr::select(id, species, ruderal, fb, max_height, flame_total, smld_total) %>%
rename(Fuel_Bed_Height = fb,
Max_Flame_Height = max_height,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total)
data_weight_clean <- data_weight_raw %>%
clean_names() %>%
dplyr::select(id, mass_loss, mass_rate) %>%
rename(Mass_Loss = mass_loss,
Mass_Loss_Rate = mass_rate)
# Aggregate the temperature data by taking the maximum temperature for each ID.
# We first filter out any rows with missing temperature values (NAs) to prevent
# the max() function from returning -Inf and generating warnings.
data_temp_clean <- data_temp_raw %>%
clean_names() %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop') %>%
# The summary() output showed these were characters. Explicitly convert to numeric.
mutate(Temp_Fuel_Bed = as.numeric(Temp_Fuel_Bed),
Temp_10cm_Above = as.numeric(Temp_10cm_Above))
# Merge all three cleaned dataframes into a single data frame with one row per ID.
data_final <- data_time_clean %>%
inner_join(data_weight_clean, by = "id") %>%
inner_join(data_temp_clean, by = "id")
# Inspect the final merged data frame to ensure it's correct
str(data_final)
summary(data_final)
# Now, we will define the list of metrics we want to plot.
# This allows us to loop through each one to create the individual plots.
metrics_to_plot <- c(
"Fuel_Bed_Height", "Max_Flame_Height", "Flame_Duration",
"Smoldering_Duration", "Mass_Loss", "Mass_Loss_Rate",
"Temp_Fuel_Bed", "Temp_10cm_Above"
)
# Create a list to store all the generated plots
plot_list <- list()
# Define a consistent color palette for all plots
cbbPalette <- c("#BE0032", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999")
# Loop through each metric to generate a box plot
for (metric_name in metrics_to_plot) {
# The aov() is a practical way to get the post-hoc tests for individual
# metrics after a significant MANCOVA.
# The formula uses the current metric name and controls for Fuel_Bed_Height.
formula_aov <- as.formula(paste(metric_name, "~ Fuel_Bed_Height + species"))
anova_model <- aov(formula_aov, data = data_final)
# This section has been modified to only perform post-hoc tests on significant metrics.
anova_summary <- summary(anova_model)
p_value_species <- anova_summary[[1]]["species", "Pr(>F)"]
if (p_value_species < 0.05) {
# Perform post-hoc Tukey HSD test on the `species` factor
tukey_results <- TukeyHSD(anova_model)
# Get the compact letter display (CLD) for the `species` factor
cld <- multcompLetters(extract_p(tukey_results$species))
cld_df <- as.data.frame(cld$Letters)
cld_df$species <- row.names(cld_df)
colnames(cld_df) <- c("letters", "species")
} else {
# If the main effect of species is not significant, assign 'a' to all species
cld_df <- data.frame(species = levels(as.factor(data_final$species)),
letters = "a")
}
# Merge the letter data with the original data for plotting
plot_data <- data_final %>%
left_join(cld_df, by = "species") %>%
group_by(species) %>%
mutate(y_position = max(.data[[metric_name]], na.rm = TRUE) +
(max(.data[[metric_name]], na.rm = TRUE) * 0.1)) # Adjust y position for labels
# Create a custom title for each plot
plot_title <- ""
if (metric_name == "Fuel_Bed_Height") {
plot_title <- "A) Fuel Bed Height (cm)"
} else if (metric_name == "Max_Flame_Height") {
plot_title <- "B) Max Flame Height (cm)"
} else if (metric_name == "Flame_Duration") {
plot_title <- "C) Flame Duration (s)"
} else if (metric_name == "Smoldering_Duration") {
plot_title <- "D) Smolder Duration (s)"
} else if (metric_name == "Mass_Loss") {
plot_title <- "E) Mass Loss (%)"
} else if (metric_name == "Mass_Loss_Rate") {
plot_title <- "F) Mass Loss Rate (g/s)"
} else if (metric_name == "Temp_Fuel_Bed") {
plot_title <- "G) Temp at Fuel Bed (C)"
} else if (metric_name == "Temp_10cm_Above") {
plot_title <- "H) Temp at 10cm Above (C)"
}
# Create the ggplot boxplot
p <- ggplot(plot_data, aes(x = species, y = .data[[metric_name]], fill = species)) +
geom_boxplot() +
# Add the compact letters at the top of each box plot
geom_text(data = distinct(plot_data, species, .keep_all = TRUE),
aes(label = letters, y = y_position),
size = 5, fontface = "bold", color = "black") +
geom_point(shape = 16, size = 2, show.legend = FALSE) +
labs(title = plot_title,
x = "",  # Remove x-axis label for cleaner look
y = "") + # Remove y-axis label
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
text = element_text(size = 12),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 14, face = "bold", colour = "black"),
axis.text.x = element_text(size = 12, face = "italic", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 12, face = "bold", color = "black"),
legend.position = "none",
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm") # Add margin
) +
scale_fill_manual(values = cbbPalette) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
# Add the generated plot to our list
plot_list[[metric_name]] <- p
}
# Combine all the plots into a single figure using ggarrange.
# The `labels` argument adds the A, B, C, ... labels.
combined_plot <- ggarrange(plotlist = plot_list,
ncol = 2, nrow = 4,
align = "hv",
common.legend = FALSE)
# Save the final combined figure to a file.
ggsave("Figures/Figure3_Combined_Boxplots.png",
plot = combined_plot,
width = 12, height = 16, units = "in")
# R Script for Cluster Analysis and Flammability Index
# Your existing script to load and prepare data...
# ... (all the code from your previous script up to the point of creating flam_metrics) ...
#########################      Installs Packages      ##########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` and `openxlsx` packages have been added.
list.of.packages <- c("dplyr", "vegan", "multcomp", "janitor", "openxlsx", "ggdendro")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install and load necessary packages
library(dplyr)
library(vegan)
library(multcomp)
library(janitor)
library(openxlsx)
library(ggplot2)
library(ggdendro)
# --- Step 1: Load and prepare the data ---
# (Your code for loading and merging data)
data_time_raw <- read.csv("Flammability Project - Time.csv")
# R Script for Cluster Analysis and Flammability Index
# Your existing script to load and prepare data...
# ... (all the code from your previous script up to the point of creating flam_metrics) ...
#########################      Installs Packages      ##########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` and `openxlsx` packages have been added.
list.of.packages <- c("dplyr", "vegan", "multcomp", "janitor", "openxlsx", "ggdendro")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install and load necessary packages
library(dplyr)
library(vegan)
library(multcomp)
library(janitor)
library(openxlsx)
library(ggplot2)
library(ggdendro)
# --- Step 1: Load and prepare the data ---
# (Your code for loading and merging data)
data_time_raw <- read.csv("Data/Flammability Project - Time.csv")
data_weight_raw <- read.csv("Data/Flammability Project - Weight.csv")
data_temp_raw <- read.csv("Data/Flammability Project - Temp.csv")
data_time_clean <- data_time_raw %>%
clean_names() %>%
dplyr::select(id, species, ruderal, fb, max_height, flame_total, smld_total) %>%
rename(Fuel_Bed_Height = fb,
Max_Flame_Height = max_height,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total)
data_weight_clean <- data_weight_raw %>%
clean_names() %>%
dplyr::select(id, mass_loss, mass_rate) %>%
rename(Mass_Loss = mass_loss,
Mass_Loss_Rate = mass_rate)
data_temp_clean <- data_temp_raw %>%
clean_names() %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop') %>%
mutate(Temp_Fuel_Bed = as.numeric(Temp_Fuel_Bed),
Temp_10cm_Above = as.numeric(Temp_10cm_Above))
data_final <- data_time_clean %>%
inner_join(data_weight_clean, by = "id") %>%
inner_join(data_temp_clean, by = "id")
# Select the flammability metrics for the multivariate analyses.
flam_metrics <- data_final %>%
dplyr::select(
id,
species,
Fuel_Bed_Height,
Flame_Duration,
Smoldering_Duration,
Mass_Loss,
Mass_Loss_Rate,
Max_Flame_Height,
Temp_Fuel_Bed,
Temp_10cm_Above
) %>%
rename(
Mass_Rate = Mass_Loss_Rate
)
# Convert the Species column to a factor
flam_metrics$species <- as.factor(flam_metrics$species)
flam_metrics <- na.omit(flam_metrics)
# --- NEW: Step 2: Perform Cluster Analysis ---
cat("\n--- Performing Cluster Analysis on Flammability Metrics ---\n")
# Select the metrics for clustering, excluding Fuel Bed Height as it's a covariate
clustering_metrics <- flam_metrics %>%
dplyr::select(Flame_Duration, Smoldering_Duration, Mass_Loss, Mass_Rate, Max_Flame_Height, Temp_Fuel_Bed, Temp_10cm_Above)
# Standardize the data
scaled_data <- scale(clustering_metrics)
# Calculate the Euclidean distance matrix
dist_matrix <- dist(scaled_data, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
# Plot the dendrogram
# This can be saved to a file and included in the paper
dendro_data <- dendro_data(hc, type = "rectangle")
ggplot(segment(dendro_data)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(dendro_data), aes(x = x, y = y, label = label, hjust = 0),
angle = 90, size = 3) +
scale_y_reverse(expand = c(0.2, 0)) +
coord_flip() +
theme_dendro() +
labs(title = "Hierarchical Cluster Analysis of Flammability Metrics")
# --- NEW: Step 3: Create a Flammability Index (based on PCA) ---
cat("\n--- Calculating Flammability Index based on PCA ---\n")
# Select only the response variables (flammability metrics)
response_vars <- flam_metrics %>%
dplyr::select(Flame_Duration, Smoldering_Duration, Mass_Loss, Mass_Rate, Max_Flame_Height, Temp_Fuel_Bed, Temp_10cm_Above)
# Perform PCA
pca_result <- prcomp(response_vars, scale = TRUE)
# The first principal component (PC1) often explains the largest amount of variance
# and can be used as a composite flammability index.
# Higher values of PC1 correspond to higher flammability characteristics.
# We will create a new data frame with species and their PC1 scores.
flammability_index_df <- flam_metrics %>%
mutate(Flammability_Index = pca_result$x[,1]) %>%
group_by(species) %>%
summarise(
Mean_Index = mean(Flammability_Index, na.rm = TRUE),
SE_Index = sd(Flammability_Index, na.rm = TRUE) / sqrt(n())
) %>%
arrange(desc(Mean_Index)) # Rank species from highest to lowest index
# Print the resulting ranked table
print(flammability_index_df)
# R Script for Cluster Analysis and Flammability Index
# Your existing script to load and prepare data...
# ... (all the code from your previous script up to the point of creating flam_metrics) ...
#########################      Installs Packages      ##########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` and `openxlsx` packages have been added.
list.of.packages <- c("dplyr", "vegan", "multcomp", "janitor", "openxlsx", "ggdendro")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install and load necessary packages
library(dplyr)
library(vegan)
library(multcomp)
library(janitor)
library(openxlsx)
library(ggplot2)
library(ggdendro)
# --- Step 1: Load and prepare the data ---
# (Your code for loading and merging data)
data_time_raw <- read.csv("Data/Flammability Project - Time.csv")
data_weight_raw <- read.csv("Data/Flammability Project - Weight.csv")
data_temp_raw <- read.csv("Data/Flammability Project - Temp.csv")
data_time_clean <- data_time_raw %>%
clean_names() %>%
dplyr::select(id, species, ruderal, fb, max_height, flame_total, smld_total) %>%
rename(Fuel_Bed_Height = fb,
Max_Flame_Height = max_height,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total)
data_weight_clean <- data_weight_raw %>%
clean_names() %>%
dplyr::select(id, mass_loss, mass_rate) %>%
rename(Mass_Loss = mass_loss,
Mass_Loss_Rate = mass_rate)
data_temp_clean <- data_temp_raw %>%
clean_names() %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop') %>%
mutate(Temp_Fuel_Bed = as.numeric(Temp_Fuel_Bed),
Temp_10cm_Above = as.numeric(Temp_10cm_Above))
data_final <- data_time_clean %>%
inner_join(data_weight_clean, by = "id") %>%
inner_join(data_temp_clean, by = "id")
# Select the flammability metrics for the multivariate analyses.
flam_metrics <- data_final %>%
dplyr::select(
id,
species,
Fuel_Bed_Height,
Flame_Duration,
Smoldering_Duration,
Mass_Loss,
Mass_Loss_Rate,
Max_Flame_Height,
Temp_Fuel_Bed,
Temp_10cm_Above
) %>%
rename(
Mass_Rate = Mass_Loss_Rate
)
# Convert the Species column to a factor
flam_metrics$species <- as.factor(flam_metrics$species)
flam_metrics <- na.omit(flam_metrics)
# --- NEW: Step 2: Perform Cluster Analysis ---
cat("\n--- Performing Cluster Analysis on Flammability Metrics ---\n")
# Select the metrics for clustering, excluding Fuel Bed Height as it's a covariate
clustering_metrics <- flam_metrics %>%
dplyr::select(Flame_Duration, Smoldering_Duration, Mass_Loss, Mass_Rate, Max_Flame_Height, Temp_Fuel_Bed, Temp_10cm_Above)
# Standardize the data
scaled_data <- scale(clustering_metrics)
# Calculate the Euclidean distance matrix
dist_matrix <- dist(scaled_data, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
# Plot the dendrogram
# This can be saved to a file and included in the paper
dendro_data <- dendro_data(hc, type = "rectangle")
ggplot(segment(dendro_data)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(dendro_data), aes(x = x, y = y, label = label, hjust = 0),
angle = 90, size = 3) +
scale_y_reverse(expand = c(0.2, 0)) +
coord_flip() +
theme_dendro() +
labs(title = "Hierarchical Cluster Analysis of Flammability Metrics")
# --- NEW: Step 3: Create a Flammability Index (based on PCA) ---
cat("\n--- Calculating Flammability Index based on PCA ---\n")
# Select only the response variables (flammability metrics)
response_vars <- flam_metrics %>%
dplyr::select(Flame_Duration, Smoldering_Duration, Mass_Loss, Mass_Rate, Max_Flame_Height, Temp_Fuel_Bed, Temp_10cm_Above)
# Perform PCA
pca_result <- prcomp(response_vars, scale = TRUE)
# The first principal component (PC1) often explains the largest amount of variance
# and can be used as a composite flammability index.
# Higher values of PC1 correspond to higher flammability characteristics.
# We will create a new data frame with species and their PC1 scores.
flammability_index_df <- flam_metrics %>%
mutate(Flammability_Index = pca_result$x[,1]) %>%
group_by(species) %>%
summarise(
Mean_Index = mean(Flammability_Index, na.rm = TRUE),
SE_Index = sd(Flammability_Index, na.rm = TRUE) / sqrt(n())
) %>%
arrange(desc(Mean_Index)) # Rank species from highest to lowest index
# Print the resulting ranked table
print(flammability_index_df)
load("C:/Users/gagem/OneDrive/Documents/GitHub/Grass-Flammability/.RData")
