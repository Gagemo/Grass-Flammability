legend.text = element_text(size = 20, face = "italic")) +
scale_fill_manual(values = cbbPalette, labels = function(x) str_wrap(x, width = 10)) +
theme(legend.position = "bottom", legend.spacing.x = unit(10.0, 'cm'),
legend.spacing.y = unit(1.0, 'cm'), legend.spacing = unit(1.0, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 8) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), size = 1.5, color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 8) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=20),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 20, face = "bold", color = "black"),
axis.text.y=element_text(size = 20, face = "bold", color = "black"),
strip.text.x = element_text(size = 20, colour = "black", face = "bold"),
legend.text = element_text(size = 20, face = "italic")) +
scale_fill_manual(values = cbbPalette, labels = function(x) str_wrap(x, width = 10)) +
theme(legend.position = "bottom", legend.spacing.x = unit(2.0, 'cm'),
legend.spacing.y = unit(1.0, 'cm'), legend.spacing = unit(1.0, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 8) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), size = 1.5, color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 8) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=20),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 20, face = "bold", color = "black"),
axis.text.y=element_text(size = 20, face = "bold", color = "black"),
strip.text.x = element_text(size = 20, colour = "black", face = "bold"),
legend.text = element_text(size = 20, face = "italic")) +
scale_fill_manual(values = cbbPalette, labels = function(x) str_wrap(x, width = 10)) +
theme(legend.position = "bottom", legend.spacing.x = unit(1.0, 'cm'),
legend.spacing.y = unit(1.0, 'cm'), legend.spacing = unit(1.0, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(emmeans)
data = read.csv("Data/Flammability Project - Time.csv")
str(data)
summary(data)
data$Species = as.character(data$Species)
data$Flame_Total = as.numeric(data$Flame_Total)
data$FB = as.numeric(data$FB)
data$Species = factor(data$Species)
data %>% anova_test(Flame_Total ~ FB + Species)
cor.test(data$Flame_Total, data$FB)
# Check Assumptions #
model  <- lm(Flame_Total ~ FB + Species, data = data)
cor = cor.test(data$Flame_Total, data$FB)
write.csv(cor, 'cor_maxflame.csv')
cor = as.data.frame(cor)
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(emmeans)
data = read.csv("Data/Flammability Project - Time.csv")
str(data)
summary(data)
data$Species = as.character(data$Species)
cor.test(data$Flame_Total, data$FB, data$Smld_Total)
View(data)
data1 <- dplyr::select(data, data$FB, data$Max_Height, data$Flame_Total, data$Smld_Total)
data1 <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total)
View(data1)
time = read.csv("Data/Flammability Project - Time.csv")
weight = read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(time, weight)
data <- data[ , !duplicated(colnames(data))]
View(data)
data <- cbind(time, weight)
data <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total, Mass_Loss, Mass_rate)
data <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total, Mass_Loss, Mass_Rate)
data <- data[ , !duplicated(colnames(data))]
data <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total, Mass_Loss, Mass_Rate)
cor(data)
core = cor(data)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
library(himsc)
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans", "himsc")
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans", "Hmisc")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(emmeans)
library(Hmisc)
time = read.csv("Data/Flammability Project - Time.csv")
weight = read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(time, weight)
data <- data[ , !duplicated(colnames(data))]
data <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total, Mass_Loss, Mass_Rate)
core = cor(data)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
flattenCorrMatrix(res2$r, res2$P)
flattenCorrMatrix(data)
library(Hmisc)
flattenCorrMatrix(data)
flattenCorrMatrix(core)
flattenCorrMatrix(core)
Hmisc::flattenCorrMatrix(core)
core = cor(data)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
Hmisc::flattenCorrMatrix(core)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
CorrMatrix(core)
flattenCorrMatrix(core)
core = cor_mat(data)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
core_p = cor_pmat(data)
write.csv(core_p, "Figures/CORE_P.csv", row.names = FALSE)
# Insignificant correlations are leaved blank
corrplot(core, type="upper", order="hclust",
p.mat = core_p, sig.level = 0.01, insig = "blank")
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
flattenCorrMatrix(core, core_p)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
flattenCorrMatrix(core, core_p)
write.csv(core_p, "Figures/CORE_FLAT.csv", row.names = FALSE)
res<-rcorr(as.matrix(data))
flattenCorrMatrix(res$r, res$P)
write.csv(core_p, "Figures/CORE_FLAT.csv", row.names = FALSE)
core_flat = flattenCorrMatrix(res$r, res$P)
write.csv(core_flat, "Figures/CORE_FLAT.csv", row.names = FALSE)
time = read.csv("Data/Flammability Project - Time.csv")
weight = read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(time, weight)
data <- data[ , !duplicated(colnames(data))]
data <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total, Mass_Loss, Mass_Rate)
colnames(GRASS) <- c("FB", "Max Flame Height", "Flame Duration",
"Smoldering Duration", "Mass Loss", "Mass Loss Rate")
core = cor_mat(data)
core_p = cor_pmat(data)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
time = read.csv("Data/Flammability Project - Time.csv")
weight = read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(time, weight)
data <- data[ , !duplicated(colnames(data))]
data <- dplyr::select(data, FB, Max_Height, Flame_Total, Smld_Total, Mass_Loss, Mass_Rate)
colnames(data) <- c("FB", "Max Flame Height", "Flame Duration",
"Smoldering Duration", "Mass Loss", "Mass Loss Rate")
core = cor_mat(data)
core_p = cor_pmat(data)
write.csv(core, "Figures/CORE.csv", row.names = FALSE)
write.csv(core_p, "Figures/CORE_P.csv", row.names = FALSE)
res<-rcorr(as.matrix(data))
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
core_flat = flattenCorrMatrix(res$r, res$P)
write.csv(core_flat, "Figures/CORE_FLAT.csv", row.names = FALSE)
write.csv(core_flat, "Figures/CORE_FLAT.csv", row.names = FALSE)
################################################################################
################################################################################
#########################   data - Flammability   #############################
#########################      Fuel Bed  Height    #############################
#########################  University of Florida   #############################
#########################     Gage LaPierre        #############################
#########################          2023            #############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################     Loads Packages     ##############################
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(emmeans)
##########################     Read in Data  ###################################
data = read.csv("Data/Flammability Project - Time.csv")
str(data)
summary(data)
data$Species = as.character(data$Species)
data$FB = as.numeric(data$FB)
data$Species = factor(data$Species)
data <- data[-c(52), ]
data %>% anova_test(FB ~ Species)
# Check Assumptions #
model  <- lm(FB ~ Species, data = data)
# Inspect the model diagnostic metrics
model.metrics <- augment(model)
head(model.metrics, 3)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Compute Shapiro-Wilk test of normality
model.metrics %>% levene_test(.resid ~ Species)
plot(model, 1)
#Outliers
model.metrics %>%
filter(abs(.std.resid) > 3) %>%
as.data.frame()
# Test for Significance #
anova_ = data %>% anova_test(FB ~ Species) %>%
add_significance()
anova_
anova <-
aov(FB ~ Species, data = data) %>% add_significance()
summary(anova)
capture.output(summary(anova), file="Figures/FuelBed.doc")
########################## Tukey Test - Multiple Comparisons ###################
tukey <-TukeyHSD(anova)
tukey
tukey_ <- data %>%
tukey_hsd(FB ~ Species) %>%
add_significance() %>%
add_xy_position()
tukey_
HSD = HSD.test(anova, trt = c("Species"))
HSD
## SIGNIFICANCE: SUGARCANE: BX VS A1 --- INDIAN: BX VS A1 ##
## GROWTH HEIGHT WAS SIGNIFICANTLY AFFECTED BY SOIL   ##
tukey.cld <- multcompLetters4(anova, tukey)
print(tukey.cld)
dt <- data %>%
group_by(Species) %>%
summarise(w=mean(exp(FB)),
sd = sd(exp(FB)) / sqrt(n())) %>%
arrange(desc(w)) %>%
ungroup()
# extracting the compact letter display and adding to the Tk table
cld2 <- data.frame(letters = tukey.cld$`Species`$Letters)
dt$tukey.cld <- cld2$letters
# The palette without black:
cbbPalette <- c("#BE0032", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999")
fb_box =
ggplot(data, aes(x = Species, y = FB, fill = Species)) +
geom_boxplot() +
geom_point(shape=16, show.legend = FALSE, size =2) +
geom_text(data = dt, aes(label = tukey.cld, y = 20), size=10, vjust = 0.5) +
theme_classic() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", colour = "black"),
text = element_text(size = 16),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"),
axis.title.y = element_text(size = 20, face = "bold", colour = "black"),
axis.text.x = element_text(size = 18, face = "italic", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 18, face = "bold", color = "black"),
strip.text = element_text(color = "black", size = 20, face = "bold"),
plot.subtitle = element_text(size = 18),
axis.ticks = element_line(size = 1.25),  # Adjusted size here
legend.position = "none") +
scale_fill_manual(values = cbbPalette) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Fuel bed height (cm)")
fb_box
ggsave("Figures/FB_Height.png",
width = 10, height = 7)
tmp <- tabular(Species ~ FB * (mean+sd+std.error), data=data)
tmp
write.csv.tabular(tmp, "Figures/FB.csv")
fb_box =
ggplot(data, aes(x = Species, y = FB, fill = Species)) +
geom_boxplot() +
geom_point(shape=16, show.legend = FALSE, size =2) +
geom_text(data = dt, aes(label = tukey.cld, y = 20), size=10, vjust = 0.5) +
labs(subtitle = get_test_label(anova_, detailed = TRUE)) +
theme_classic() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", colour = "black"),
text = element_text(size = 16),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"),
axis.title.y = element_text(size = 20, face = "bold", colour = "black"),
axis.text.x = element_text(size = 18, face = "italic", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 18, face = "bold", color = "black"),
strip.text = element_text(color = "black", size = 20, face = "bold"),
plot.subtitle = element_text(size = 18),
axis.ticks = element_line(size = 1.25),  # Adjusted size here
legend.position = "none") +
scale_fill_manual(values = cbbPalette) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Fuel bed height (cm)")
fb_box
ggsave("Figures/FB_Height.png",
width = 10, height = 7)
tmp <- tabular(Species ~ FB * (mean+sd+std.error), data=data)
tmp
write.csv.tabular(tmp, "Figures/FB.csv")
################################################################################
################################################################################
#########################   Grass - Flammability   #############################
#########################          PCA             #############################
#########################  University of Florida   #############################
#########################     Gage LaPierre        #############################
#########################          2023            #############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "factoextra",
"FactoMineR")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################     Loads Packages     ##############################
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(factoextra)
library(FactoMineR)
##########################     Read in Data  ###################################
TIME <- read.csv("Data/Flammability Project - Time.csv")
LOSS <- read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(TIME, LOSS)
data$FB = as.numeric(data$FB)
data <- data[ , !duplicated(colnames(data))]
data <- data %>%
dplyr::select(Flame_Total, Smld_Total, Max_Height, Mass_Loss, Mass_Rate)
colnames(data) <- c("Flame Duration", "Smolder Time",
"Flame Height", "Mass Loss", "Mass Rate")
data$Species <- TIME$Species
data$Status <- TIME$Ruderal
pca <- data %>% dplyr::select(-Species, -Status) %>%
rda(scale = TRUE)  # Remove 'Species' and 'Status' columns for PCA
pca_scores <- as.data.frame(vegan::scores(pca, choices = c(1, 2), display = "sites"))
pca_scores$Species <- data$Species  # Add species information to scores
pca_scores$Status <- data$Status    # Add status information to scores
# Extract the loadings for plotting arrows
loadings <- as.data.frame(vegan::scores(pca, display = "species"))
loadings$Flammability <- rownames(loadings)
# The palette without black:
cbbPalette <- c("#BE0032", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999")
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 8) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), size = 1.5, color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 8) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=20),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 20, face = "bold", color = "black"),
axis.text.y=element_text(size = 20, face = "bold", color = "black"),
strip.text.x = element_text(size = 20, colour = "black", face = "bold"),
legend.text = element_text(size = 20, face = "italic")) +
scale_fill_manual(values = cbbPalette, labels = function(x) str_wrap(x, width = 10)) +
theme(legend.position = "bottom", legend.spacing.x = unit(1.0, 'cm'),
legend.spacing.y = unit(1.0, 'cm'), legend.spacing = unit(1.0, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Status)) +
geom_point(size = 4, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 2, yend = PC2 * 2),
arrow = arrow(length = unit(0.3, "cm")), color = "red") +
geom_text(data = loadings, aes(x = PC1 * 2, y = PC2 * 2, label = Flammability),
color = "red", vjust = -0.5, hjust = 0.5) +
stat_ellipse(aes(color = Status), type = "norm", level = 0.95) +  # Add ellipses
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x = element_text(size = 15, colour = "black", face = "bold"),
legend.text = element_text(face = "italic")) +
scale_fill_manual(values = cbbPalette) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA_ruderal.png",
width = 10, height = 7)
write.table(loadings, file = "Figures/loadings.csv", sep=",")
res.pca <- data %>% dplyr::select(-Species, -Status) %>% PCA(graph = FALSE)
var <- get_pca_var(res.pca)
var
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10)
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans")
