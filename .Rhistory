# R Script for Cluster Analysis and Flammability Index
# Your existing script to load and prepare data...
# ... (all the code from your previous script up to the point of creating flam_metrics) ...
#########################      Installs Packages      ##########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` and `openxlsx` packages have been added.
list.of.packages <- c("dplyr", "vegan", "multcomp", "janitor", "openxlsx", "ggdendro")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install and load necessary packages
library(dplyr)
library(vegan)
library(multcomp)
library(janitor)
library(openxlsx)
library(ggplot2)
library(ggdendro)
# --- Step 1: Load and prepare the data ---
# (Your code for loading and merging data)
data_time_raw <- read.csv("Data/Flammability Project - Time.csv")
data_weight_raw <- read.csv("Data/Flammability Project - Weight.csv")
data_temp_raw <- read.csv("Data/Flammability Project - Temp.csv")
data_time_clean <- data_time_raw %>%
clean_names() %>%
dplyr::select(id, species, ruderal, fb, max_height, flame_total, smld_total) %>%
rename(Fuel_Bed_Height = fb,
Max_Flame_Height = max_height,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total)
data_weight_clean <- data_weight_raw %>%
clean_names() %>%
dplyr::select(id, mass_loss, mass_rate) %>%
rename(Mass_Loss = mass_loss,
Mass_Loss_Rate = mass_rate)
data_temp_clean <- data_temp_raw %>%
clean_names() %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop') %>%
mutate(Temp_Fuel_Bed = as.numeric(Temp_Fuel_Bed),
Temp_10cm_Above = as.numeric(Temp_10cm_Above))
data_final <- data_time_clean %>%
inner_join(data_weight_clean, by = "id") %>%
inner_join(data_temp_clean, by = "id")
# Select the flammability metrics for the multivariate analyses.
flam_metrics <- data_final %>%
dplyr::select(
id,
species,
Fuel_Bed_Height,
Flame_Duration,
Smoldering_Duration,
Mass_Loss,
Mass_Loss_Rate,
Max_Flame_Height,
Temp_Fuel_Bed,
Temp_10cm_Above
) %>%
rename(
Mass_Rate = Mass_Loss_Rate
)
# Convert the Species column to a factor
flam_metrics$species <- as.factor(flam_metrics$species)
flam_metrics <- na.omit(flam_metrics)
# --- NEW: Step 2: Perform Cluster Analysis ---
cat("\n--- Performing Cluster Analysis on Flammability Metrics ---\n")
# Select the metrics for clustering, excluding Fuel Bed Height as it's a covariate
clustering_metrics <- flam_metrics %>%
dplyr::select(Flame_Duration, Smoldering_Duration, Mass_Loss, Mass_Rate, Max_Flame_Height, Temp_Fuel_Bed, Temp_10cm_Above)
# Standardize the data
scaled_data <- scale(clustering_metrics)
# Calculate the Euclidean distance matrix
dist_matrix <- dist(scaled_data, method = "euclidean")
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
# Plot the dendrogram
# This can be saved to a file and included in the paper
dendro_data <- dendro_data(hc, type = "rectangle")
ggplot(segment(dendro_data)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(dendro_data), aes(x = x, y = y, label = label, hjust = 0),
angle = 90, size = 3) +
scale_y_reverse(expand = c(0.2, 0)) +
coord_flip() +
theme_dendro() +
labs(title = "Hierarchical Cluster Analysis of Flammability Metrics")
# --- NEW: Step 3: Create a Flammability Index (based on PCA) ---
cat("\n--- Calculating Flammability Index based on PCA ---\n")
# Select only the response variables (flammability metrics)
response_vars <- flam_metrics %>%
dplyr::select(Flame_Duration, Smoldering_Duration, Mass_Loss, Mass_Rate, Max_Flame_Height, Temp_Fuel_Bed, Temp_10cm_Above)
# Perform PCA
pca_result <- prcomp(response_vars, scale = TRUE)
# The first principal component (PC1) often explains the largest amount of variance
# and can be used as a composite flammability index.
# Higher values of PC1 correspond to higher flammability characteristics.
# We will create a new data frame with species and their PC1 scores.
flammability_index_df <- flam_metrics %>%
mutate(Flammability_Index = pca_result$x[,1]) %>%
group_by(species) %>%
summarise(
Mean_Index = mean(Flammability_Index, na.rm = TRUE),
SE_Index = sd(Flammability_Index, na.rm = TRUE) / sqrt(n())
) %>%
arrange(desc(Mean_Index)) # Rank species from highest to lowest index
# Print the resulting ranked table
print(flammability_index_df)
################################################################################
################################################################################
#########################    Grass - Flammability    ###########################
#########################           PCA              ###########################
#########################     University of Florida      #######################
#########################          Gage LaPierre         #######################
#########################             2023               #######################
################################################################################
################################################################################
######################### Clears Environment & History #########################
rm(list=ls(all=TRUE))
cat("\014")
#########################      Installs Packages     ###########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` package has been added to handle problematic column names.
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "factoextra",
"FactoMineR", "janitor")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################      Loads Packages      ############################
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(factoextra)
library(FactoMineR)
library(janitor)
##########################        Read in Data       ###########################
# Read in all three CSV files, correcting the file paths.
# We will merge the dataframes by their `ID` column for robustness.
TIME_raw <- read.csv("Data/Flammability Project - Time.csv")
LOSS_raw <- read.csv("Data/Flammability Project - Weight.csv")
TEMP_raw <- read.csv("Data/Flammability Project - Temp.csv")
# Clean column names using janitor::clean_names()
TIME_clean <- TIME_raw %>% clean_names()
LOSS_clean <- LOSS_raw %>% clean_names()
TEMP_clean <- TEMP_raw %>% clean_names()
# Aggregate the temperature data by taking the maximum temperature for each ID.
# The previous version had a coercion warning. We'll explicitly convert
# to numeric first to handle any non-numeric values gracefully.
data_temp <- TEMP_clean %>%
mutate(t1 = as.numeric(t1),
t2 = as.numeric(t2)) %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop')
# Merge the dataframes into a single data frame based on the 'id' column
# We first select the columns we need from each dataframe to avoid duplicate
# column names like `species.x` and `species.y`.
data_final <- TIME_clean %>%
dplyr::select(id, species, ruderal, fb, max_height, flame_total, smld_total) %>%
inner_join(dplyr::select(LOSS_clean, id, mass_loss, mass_rate), by = "id") %>%
inner_join(data_temp, by = "id")
# Now, we will create the dataset for the PCA.
# The `max_temp` variables (Temp_Fuel_Bed and Temp_10cm_Above) are now included.
pca_data <- data_final %>%
dplyr::select(
flame_total,
smld_total,
max_height,
mass_loss,
mass_rate,
Temp_Fuel_Bed,
Temp_10cm_Above
)
# Rename columns for better readability in the plot
colnames(pca_data) <- c(
"Flame Duration",
"Smolder Time",
"Flame Height",
"Mass Loss",
"Mass Rate",
"Fuel Bed Max Temp",
"10cm Max Temp"
)
# Perform the PCA using the rda() function from the vegan package
pca <- pca_data %>%
rda(scale = TRUE)
# Extract the scores for the sites (data points)
pca_scores <- as.data.frame(vegan::scores(pca, choices = c(1, 2), display = "sites"))
pca_scores$Species <- data_final$species  # Add species information
pca_scores$Status <- data_final$ruderal   # Add status information
# Extract the loadings for plotting arrows
loadings <- as.data.frame(vegan::scores(pca, display = "species"))
loadings$Flammability <- rownames(loadings)
# The palette without black:
cbbPalette <- c("#BE0032", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999")
# Plot 1: PCA biplot colored by Species
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 8) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), size = 1.5, color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 8) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=20),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 20, face = "bold", color = "black"),
axis.text.y=element_text(size = 20, face = "bold", color = "black"),
strip.text.x = element_text(size = 20, colour = "black", face = "bold"),
legend.text = element_text(size = 20, face = "italic")) +
scale_fill_manual(values = cbbPalette, labels = function(x) str_wrap(x, width = 10)) +
theme(legend.position = "bottom", legend.spacing.x = unit(1.0, 'cm'),
legend.spacing.y = unit(1.0, 'cm'), legend.spacing = unit(1.0, 'cm')) +
guides(fill = guide_legend(byrow = TRUE))
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
# Plot 2: PCA biplot colored by Ruderal Status with ellipses
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Status)) +
geom_point(size = 4, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 2, yend = PC2 * 2),
arrow = arrow(length = unit(0.3, "cm")), color = "red") +
geom_text(data = loadings, aes(x = PC1 * 2, y = PC2 * 2, label = Flammability),
color = "red", vjust = -0.5, hjust = 0.5) +
stat_ellipse(aes(color = Status), type = "norm", level = 0.95) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x = element_text(size = 15, colour = "black", face = "bold"),
legend.text = element_text(face = "italic")) +
scale_fill_manual(values = cbbPalette) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA_ruderal.png",
width = 10, height = 7)
write.table(loadings, file = "Figures/loadings.csv", sep=",")
res.pca <- pca_data %>% PCA(graph = FALSE)
var <- get_pca_var(res.pca)
var
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10)
################################################################################
################################################################################
#########################     Grass - Flammability      ###########################
#####################  PERMANOVA, MANCOVA, Regression   #########################
#########################     University of Florida      #######################
#########################         Gage LaPierre          #######################
#########################             2023               #######################
################################################################################
################################################################################
######################### Clears Environment & History #########################
rm(list=ls(all=TRUE))
cat("\014")
#########################      Installs Packages      ###########################
# This code checks if the necessary packages are installed. If not, it installs
# them automatically to ensure the script runs smoothly.
# The `janitor` and `openxlsx` packages have been added.
list.of.packages <- c("dplyr", "vegan", "multcomp", "janitor", "openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install and load necessary packages
library(dplyr)
library(vegan)
library(multcomp)
library(janitor)
library(openxlsx)
# --- Step 1: Load and prepare the data ---
time_df_raw <- read.csv("Data/Flammability Project - Time.csv")
weight_df_raw <- read.csv("Data/Flammability Project - Weight.csv")
temp_df_raw <- read.csv("Data/Flammability Project - Temp.csv")
# Clean column names using janitor::clean_names() for consistency
time_df <- time_df_raw %>% clean_names()
weight_df <- weight_df_raw %>% clean_names()
temp_df <- temp_df_raw %>% clean_names()
# Aggregate the temperature data by taking the maximum temperature for each ID.
data_temp <- temp_df %>%
mutate(t1 = as.numeric(t1),
t2 = as.numeric(t2)) %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop')
# Merge all three dataframes based on the 'id' column.
flammability_data <- time_df %>%
dplyr::select(id, species, ruderal, fb, flame_total, smld_total, max_height) %>%
inner_join(dplyr::select(weight_df, id, mass_loss, mass_rate), by = "id") %>%
inner_join(data_temp, by = "id")
# Select the flammability metrics for the multivariate analyses.
flam_metrics <- flammability_data %>%
dplyr::select(
id,
species,
fb,
flame_total,
smld_total,
mass_loss,
mass_rate,
max_height,
Temp_Fuel_Bed,
Temp_10cm_Above
) %>%
rename(
Fuelbed_Height = fb,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total,
Mass_Loss = mass_loss,
Mass_Rate = mass_rate,
Max_Flame_Height = max_height
)
# Convert the Species column to a factor
flam_metrics$species <- as.factor(flam_metrics$species)
# Drop any rows with missing data (NA values) to ensure the analyses run correctly.
flam_metrics <- na.omit(flam_metrics)
# --- Step 2: Perform MANCOVA ---
response_vars <- as.matrix(flam_metrics[, c("Flame_Duration", "Smoldering_Duration",
"Mass_Loss", "Mass_Rate",
"Max_Flame_Height", "Temp_Fuel_Bed",
"Temp_10cm_Above")])
mancova_model <- manova(response_vars ~ species + Fuelbed_Height, data = flam_metrics)
summary(mancova_model)
summary.aov(mancova_model)
# --- NEW: Save individual ANOVA results to Excel ---
cat("\n--- Saving MANCOVA individual ANOVA results to Excel ---\n")
aov_list <- summary.aov(mancova_model)
aov_results_list <- list()
for (i in 1:length(aov_list)) {
variable_name <- names(aov_list)[i]
df <- as.data.frame(aov_list[[i]])
df$Source <- rownames(df)
df <- df %>%
dplyr::select(Source, everything())
aov_results_list[[variable_name]] <- df
}
write.xlsx(aov_results_list, "MANCOVA_AOV_Results.xlsx")
# --- Post-Hoc Tests for MANCOVA with robust error handling and expanded results ---
run_posthoc_tukey <- function(metric, data) {
cat(paste0("\n--- Post-Hoc Test for ", metric, " using TukeyHSD() ---\n"))
if (metric %in% c("Temp_Fuel_Bed", "Temp_10cm_Above")) {
cat(paste0("Skipping post-hoc test for ", metric, " as main effect 'species' was not significant.\n"))
return(NULL)
}
aov_model <- aov(as.formula(paste(metric, "~ species")), data = data)
tukey_result <- tryCatch({
TukeyHSD(aov_model, "species")
}, error = function(e) {
cat(paste0("Error in TukeyHSD for ", metric, ": ", conditionMessage(e), "\n"))
return(NULL)
}, warning = function(w) {
cat(paste0("Warning in TukeyHSD for ", metric, ": ", conditionMessage(w), "\n"))
return(NULL)
})
if (is.null(tukey_result) || is.null(tukey_result$species)) {
cat(paste0("TukeyHSD test for ", metric, " failed to produce a valid result.\n"))
return(NULL)
}
result_df <- as.data.frame(tukey_result$species)
result_df$Comparison <- rownames(result_df)
result_df <- result_df %>%
dplyr::select(Comparison, everything()) %>%
rename(
Estimate = diff,
`Std Error` = `lwr`,
L_Bound = `lwr`,
U_Bound = `upr`,
P_Value = `p adj`
)
return(result_df)
}
metrics_to_test <- c("Flame_Duration", "Smoldering_Duration", "Mass_Loss", "Mass_Rate",
"Max_Flame_Height", "Temp_Fuel_Bed", "Temp_10cm_Above")
posthoc_results <- lapply(metrics_to_test, run_posthoc_tukey, data = flam_metrics)
names(posthoc_results) <- metrics_to_test
write.xlsx(posthoc_results, "MANCOVA_Expanded_Results.xlsx")
# --- Step 3: Perform PERMANOVA ---
flam_dist <- vegdist(response_vars, method = "euclidean")
permanova_result <- adonis2(flam_dist ~ species + Fuelbed_Height, data = flam_metrics)
write.xlsx(permanova_result, "PERMANOVA_Results.xlsx", row.names = FALSE)
# --- Step 4: Perform PC Regression on the first two PCs ---
pca_result <- prcomp(response_vars, scale = TRUE)
flam_metrics$PC1 <- pca_result$x[,1]
flam_metrics$PC2 <- pca_result$x[,2]
pc1_aov <- aov(PC1 ~ species, data = flam_metrics)
summary(pc1_aov)
pc2_aov <- aov(PC2 ~ species, data = flam_metrics)
summary(pc2_aov)
# --- Post-Hoc Test for PC2 ANOVA and PC1 ANOVA with robust handling ---
cat("\n--- Post-Hoc Test for PC1 ANOVA ---\n")
posthoc_pc1 <- tryCatch({
glht(pc1_aov, linfct = mcp(species = "Tukey"))
}, error = function(e) {
cat("Error in post-hoc test for PC1: ", conditionMessage(e), "\n")
return(NULL)
}, warning = function(w) {
cat("Warning in post-hoc test for PC1: ", conditionMessage(w), "\n")
return(NULL)
})
if (!is.null(posthoc_pc1)) {
summary(posthoc_pc1)
}
cat("\n--- Post-Hoc Test for PC2 ANOVA ---\n")
posthoc_pc2 <- tryCatch({
glht(pc2_aov, linfct = mcp(species = "Tukey"))
}, error = function(e) {
cat("Error in post-hoc test for PC2: ", conditionMessage(e), "\n")
return(NULL)
}, warning = function(w) {
cat("Warning in post-hoc test for PC2: ", conditionMessage(w), "\n")
return(NULL)
})
if (!is.null(posthoc_pc2)) {
summary(posthoc_pc2)
}
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("dplyr", "vegan", "multcomp", "janitor", "openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Install and load necessary packages
library(dplyr)
library(vegan)
library(multcomp)
library(janitor)
library(openxlsx)
# --- Step 1: Load and prepare the data ---
time_df_raw <- read.csv("Data/Flammability Project - Time.csv")
weight_df_raw <- read.csv("Data/Flammability Project - Weight.csv")
temp_df_raw <- read.csv("Data/Flammability Project - Temp.csv")
# Clean column names using janitor::clean_names() for consistency
time_df <- time_df_raw %>% clean_names()
weight_df <- weight_df_raw %>% clean_names()
temp_df <- temp_df_raw %>% clean_names()
# Aggregate the temperature data by taking the maximum temperature for each ID.
data_temp <- temp_df %>%
mutate(t1 = as.numeric(t1),
t2 = as.numeric(t2)) %>%
filter(!is.na(t1) & !is.na(t2)) %>%
group_by(id) %>%
summarise(Temp_Fuel_Bed = max(t1, na.rm = TRUE),
Temp_10cm_Above = max(t2, na.rm = TRUE),
.groups = 'drop')
# Merge all three dataframes based on the 'id' column.
flammability_data <- time_df %>%
dplyr::select(id, species, ruderal, fb, flame_total, smld_total, max_height) %>%
inner_join(dplyr::select(weight_df, id, mass_loss, mass_rate), by = "id") %>%
inner_join(data_temp, by = "id")
# Select the flammability metrics for the multivariate analyses.
flam_metrics <- flammability_data %>%
dplyr::select(
id,
species,
fb,
flame_total,
smld_total,
mass_loss,
mass_rate,
max_height,
Temp_Fuel_Bed,
Temp_10cm_Above
) %>%
rename(
Fuelbed_Height = fb,
Flame_Duration = flame_total,
Smoldering_Duration = smld_total,
Mass_Loss = mass_loss,
Mass_Rate = mass_rate,
Max_Flame_Height = max_height
)
# Convert the Species column to a factor
flam_metrics$species <- as.factor(flam_metrics$species)
# Drop any rows with missing data (NA values) to ensure the analyses run correctly.
flam_metrics <- na.omit(flam_metrics)
# --- Step 2: Perform MANCOVA ---
response_vars <- as.matrix(flam_metrics[, c("Flame_Duration", "Smoldering_Duration",
"Mass_Loss", "Mass_Rate",
"Max_Flame_Height", "Temp_Fuel_Bed",
"Temp_10cm_Above")])
mancova_model <- manova(response_vars ~ species + Fuelbed_Height, data = flam_metrics)
summary(mancova_model)
summary.aov(mancova_model)
