text = element_text(size = 16),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"),
axis.title.y = element_text(size = 20, face = "bold", colour = "black"),
axis.text.x = element_text(size = 18, face = "italic", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 18, face = "bold", color = "black"),
strip.text = element_text(color = "black", size = 20, face = "bold"),
plot.subtitle = element_text(size = 18),
axis.ticks = element_line(size = 1.25),  # Adjusted size here
legend.position = "none"
) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Max temperature (C)")
box
ggsave("Figures/Box_Max_T1.png",
width = 10, height = 7)
# Create the table
print(MEANS)
MEANS = as.data.frame(MEANS)
write.csv(MEANS, "Figures/TempT1.csv", row.names = FALSE)
################################################################################
################################################################################
################################ t2 (top probe) ################################
################################################################################
################################################################################
# Check Assumptions #
model  <- lm(MaxT2 ~ FB + Species, data = data)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Test for Significance #
anova_ = data %>% anova_test(MaxT2 ~ FB + Species) %>%
add_significance()
anova_
lm(formula = MaxT2 ~ FB + Species, data)
pwc <- data %>%
emmeans_test(
MaxT2 ~ Species, covariate = FB,
p.adjust.method = "bonferroni"
)
pwc
MEANS = get_emmeans(pwc)
# Visualization: line plots with p-values
pwc <- pwc %>% add_xy_position(x = "Species", fun = "mean_se")
ggline(get_emmeans(pwc), x = "Species", y = "emmean") +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
stat_pvalue_manual(pwc, hide.ns = TRUE, tip.length = FALSE) +
labs(
subtitle = get_test_label(anova_, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# Fit the ANOVA model
anova <- aov(MaxT2 ~ FB + Species, data = data)
# Perform post-hoc tests on the Species factor
posthoc_results <- emmeans(anova, pairwise ~ Species)
# Generate compact letter displays for significance testing
cld_results <- multcomp::cld(posthoc_results$emmeans, Letters = letters, adjust = "tukey")
cld_results
# Convert cld_results to a data frame
cld_df <- as.data.frame(cld_results)
box =
ggplot(data, aes(x = Species, y = MaxT2, fill = Species)) +
geom_boxplot() +
geom_text(data = cld_df, aes(x = Species, label = .group, y = 925), size = 10) +
geom_point(shape = 16, show.legend = FALSE, size = 2) +
labs(subtitle = get_test_label(anova_, detailed = TRUE)) +
theme_classic() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", colour = "black"),
text = element_text(size = 16),
axis.title.x = element_text(size = 20, face = "bold", colour = "black"),
axis.title.y = element_text(size = 20, face = "bold", colour = "black"),
axis.text.x = element_text(size = 18, face = "italic", color = "black", angle = 45, hjust = 1),
axis.text.y = element_text(size = 18, face = "bold", color = "black"),
strip.text = element_text(color = "black", size = 20, face = "bold"),
plot.subtitle = element_text(size = 18),
axis.ticks = element_line(size = 1.25),  # Adjusted size here
legend.position = "none"
) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Max temperature (C)")
box
ggsave("Figures/Box_Max_T2.png",
width = 10, height = 7)
# Create the table
print(MEANS)
MEANS = as.data.frame(MEANS)
write.csv(MEANS, "Figures/TempT2.csv", row.names = FALSE)
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
TIME <- read.csv("Data/Flammability Project - Time.csv")
LOSS <- read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(TIME, LOSS)
data$FB = as.numeric(data$FB)
data <- data[ , !duplicated(colnames(data))]
data <- data %>%
dplyr::select(Flame_Total, Smld_Total, Max_Height, Mass_Loss, Mass_Rate)
colnames(data) <- c("Flame Duration", "Smolder Time",
"Flame Height", "Mass Loss", "Mass Rate")
data$Species <- TIME$Species
data$Status <- TIME$Ruderal
pca <- data %>% dplyr::select(-Species, -Status) %>%
rda(scale = TRUE)  # Remove 'Species' and 'Status' columns for PCA
pca_scores <- as.data.frame(vegan::scores(pca, choices = c(1, 2), display = "sites"))
pca_scores$Species <- data$Species  # Add species information to scores
pca_scores$Status <- data$Status    # Add status information to scores
# Extract the loadings for plotting arrows
loadings <- as.data.frame(vegan::scores(pca, display = "species"))
loadings$Flammability <- rownames(loadings)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(shape = 21, size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(shape = 16, size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(shape = 1, size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(shape = 21, size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2, fill = Species)) +
geom_point(shape = 21, size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 6, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 6) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 6) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "right")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 6) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2)) +
geom_point(aes(fill = Species), shape = 21, size = 6) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 0.5, yend = PC2 * 0.5),
arrow = arrow(length = unit(0.3, "cm")), color = "black") +
geom_text(data = loadings, aes(x = PC1 * 0.5, y = PC2 * 0.5, label = Flammability),
color = "black", vjust = -0.5, hjust = 0.5, size = 7) +
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(face="bold", colour = "black"),
axis.title.y = element_text(face="bold", colour = "black"),
axis.text.x=element_text(size = 16, face = "bold", color = "black"),
axis.text.y=element_text(size = 16, face = "bold", color = "black"),
strip.text.x = element_text(size = 18, colour = "black", face = "bold"),
legend.text = element_text(size = 18, face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA.png",
width = 19, height = 12)
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Status)) +
geom_point(size = 4, alpha = 0.7) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = PC1 * 2, yend = PC2 * 2),
arrow = arrow(length = unit(0.3, "cm")), color = "red") +
geom_text(data = loadings, aes(x = PC1 * 2, y = PC2 * 2, label = Flammability),
color = "red", vjust = -0.5, hjust = 0.5) +
stat_ellipse(aes(color = Status), type = "norm", level = 0.95) +  # Add ellipses
xlab(paste("PC1 (", round(summary(pca)$cont$importance[2, 1] * 100, 1), "%)", sep = "")) +
ylab(paste("PC2 (", round(summary(pca)$cont$importance[2, 2] * 100, 1), "%)", sep = "")) +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, face="bold", colour = "black"),
text=element_text(size=18),
axis.title.x = element_text(size=15, face="bold", colour = "black"),
axis.title.y = element_text(size=15, face="bold", colour = "black"),
axis.text.x=element_text(size=15, face = "bold", color = "black"),
axis.text.y=element_text(size=15, face = "bold", color = "black"),
strip.text.x = element_text(size = 15, colour = "black", face = "bold"),
legend.text = element_text(face = "italic")) +
theme(legend.position = "bottom")
ggsave("Figures/Box_PCA_ruderal.png",
width = 10, height = 7)
write.table(loadings, file = "Figures/loadings.csv", sep=",")
rm(list=ls(all=TRUE))
cat("\014")
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(emmeans)
TIME <- read.csv("Data/Flammability Project - Time.csv")
LOSS <- read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(TIME, LOSS)
data$FB = as.numeric(data$FB)
data <- data[ , !duplicated(colnames(data))]
data <- data %>%
dplyr::select(Species, Flame_Total, Smld_Total, Max_Height, Mass_Loss)
colnames(data) <- c("Species", "Flame Duration", "Smolder Time", "Flame Height", "Mass Loss")
# Extract Species column for later use
species <- data$Species
# Remove the Species column for clustering
data_no_species <- data[, -1]
# Perform K-Means clustering with 3 clusters
set.seed(123)
kmeans_result <- kmeans(data_no_species, centers = 3, nstart = 20)
# View the result
print(kmeans_result)
# Add the cluster assignment and species back to the original data
data$Cluster <- as.factor(kmeans_result$cluster)
# Plot the clusters with species labels
ggplot(data, aes(x = `Species`, y = `Flame Height`,
color = Cluster)) +
geom_point(size = 3) +
labs(title = "K-Means Clustering of Grass Flammability Data",
x = "Flame Duration", y = "Flame Height") +
theme_minimal()
################################################################################
################################################################################
#########################   Grass - Flammability   #############################
#########################          PCA             #############################
#########################  University of Florida   #############################
#########################     Gage LaPierre        #############################
#########################          2023            #############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "vegan", "agricolae", "tables", "plotrix",
"ggpubr", "rstatix", "multcompView", "emmeans")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################     Loads Packages     ##############################
library(tidyverse)
library(vegan)
library(agricolae)
library(tables)
library(plotrix)
library(ggpubr)
library(rstatix)
library(multcompView)
library(emmeans)
##########################     Read in Data  ###################################
TIME <- read.csv("Data/Flammability Project - Time.csv")
LOSS <- read.csv("Data/Flammability Project - Weight.csv")
data <- cbind(TIME, LOSS)
data$FB = as.numeric(data$FB)
data <- data[ , !duplicated(colnames(data))]
data <- data %>%
dplyr::select(Species, Flame_Total, Smld_Total, Max_Height, Mass_Loss)
colnames(data) <- c("Species", "Flame Duration", "Smolder Time", "Flame Height", "Mass Loss")
# Extract Species column for later use
species <- data$Species
# Remove the Species column for clustering
data_no_species <- data[, -1]
# Perform K-Means clustering with 3 clusters
set.seed(123)
kmeans_result <- kmeans(data_no_species, centers = 3, nstart = 20)
# View the result
print(kmeans_result)
# Add the cluster assignment and species back to the original data
data$Cluster <- as.factor(kmeans_result$cluster)
# Plot the clusters with species labels
ggplot(data, aes(x = `Flame Duration`, y = `Flame Height`,
color = Cluster)) +
geom_point(size = 3) +
labs(title = "K-Means Clustering of Grass Flammability Data",
x = "Flame Duration", y = "Flame Height") +
theme_minimal()
